Сегодня поговорим о связных списках
Это структура данных, которая хранит списки данных специальным образом

у связного списка есть информация о первом элементе(где он находится)
естественно первый элемент может нигде не находится (Nan) тогда это говорит о том что список пуст
но может указывать на конкретный элемент, какие-то данные
эсли это список и есть первый лемент то доден быть и вотрой элемент
информция о том где хранится втророй эелмент находится в первом элементе

такой список нахывается односвязным
чем он хорош?
Чем он плох?
в отличие от стандратного списка где мы можем сраху обращатся к 5 элементу
в связном списке так нельзя и нузно пройти все 4 элемента до
пожтому получать нужный жлемент долго

А что если нужно вставаить элемент ?
В обычном списке мы все двигаем врпаво и ставим жлемент на крайнее левое место
А в связном списке?
нам нужно создать отдельно узел с элментом и потом его перенаправить
в результатае мы вставаляем элемент просто внутрь
Т.е. вставка элемента происходит быстро
Удаление так же происходит быстро

Если надо часто послежовательнымм образом обрабатывать лементы
или периодически нужго вставить что-то или удалить
от струкутра связног списка окажется более удачнм
да будет замедлен переход между элементами, но вставка будет быстрее

Есть свои плюсы и минусы

как добавить элемент в односвязный список?
Нужно создать конструкцию в которой будет хранитья значение и информация о следующем желменте
Вставляем эту конструкцию мы в начало потому что в конец долго
А как забираем?
Сохраняем это значение и забираем
Фактически у нас получается стек
Добавляем и убираем в начало и делаем это быстро

Так что это хороший способ реализации стека
можем немного добавить инфы в список о первом элементе и о последнем
тогда мы можем сделать добавление именно в конец

Но забирать с конца всё равно проблематично
Небольшая такая модификация списка делает этот список очередью

Да и в целом ДЭК

забирать можем с одной стороны и добавлять с одной

двусвязный список сделать так же несложно
просто добавим инфу про предыдущий

Тогда в чистом виде будет реализован ДЭК
Что плохого?
не можем быстро добраться до нужно элемента
Но если храним длину, то можем понять с какой стороны быстрее дойти-слева или справа

Что ещё можем из этого сделать?
Есть ордносвязный список.Есть начальный элемент а последний указывает в никуда.
Но это ведь необязательно
После последнего элемента можем сделать первый

Модель кольцевого буфера

Кольцевык буферы с переполнением. перезаписываем первый элемент(?)
А может быть блокировка при добавлении элемента который не влезает

Предпололжим возникает азадча, что люди сидят вокург круглого стола и могу общаться только с соседями.
У вас структура может так оказаться что реализует задачу.

нормальная реализации связныз спискох делается через классы, объекты
Но ООП мы будем проходить в следующем семестре.

Сейчас будем писать реализацию, но она будет немного корявой с тточки зрения нормальной реализации


В двусвязном списке можем ходить вперед и назад
А в односвязном только вперед

на линуксу открыть vimtutor и потыкать его
